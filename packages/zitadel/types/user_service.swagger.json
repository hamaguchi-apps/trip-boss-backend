{
  "swagger": "2.0",
  "info": {
    "title": "User Service",
    "description": "This API is intended to manage users in a ZITADEL instance.",
    "version": "2.0",
    "contact": {
      "name": "ZITADEL",
      "url": "https://zitadel.com",
      "email": "hi@zitadel.com"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "https://github.com/zitadel/zitadel/blob/main/LICENSE"
    }
  },
  "tags": [
    {
      "name": "UserService"
    }
  ],
  "host": "$CUSTOM-DOMAIN",
  "basePath": "/",
  "schemes": [
    "https",
    "http"
  ],
  "consumes": [
    "application/json",
    "application/grpc",
    "application/grpc-web+proto"
  ],
  "produces": [
    "application/json",
    "application/grpc",
    "application/grpc-web+proto"
  ],
  "paths": {
    "/v2/idp_intents": {
      "post": {
        "summary": "Start flow with an identity provider",
        "description": "Start a flow with an identity provider, for external login, registration or linking..",
        "operationId": "UserService_StartIdentityProviderIntent",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v2StartIdentityProviderIntentResponse"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v2StartIdentityProviderIntentRequest"
            }
          }
        ],
        "tags": [
          "UserService"
        ]
      }
    },
    "/v2/idp_intents/{idpIntentId}": {
      "post": {
        "summary": "Retrieve the information returned by the identity provider",
        "description": "Retrieve the information returned by the identity provider for registration or updating an existing user with new information..",
        "operationId": "UserService_RetrieveIdentityProviderIntent",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v2RetrieveIdentityProviderIntentResponse"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "idpIntentId",
            "description": "ID of the idp intent, previously returned on the success response of the IDP callback",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserServiceRetrieveIdentityProviderIntentBody"
            }
          }
        ],
        "tags": [
          "UserService"
        ]
      }
    },
    "/v2/users": {
      "post": {
        "summary": "Search Users",
        "description": "Search for users. By default, we will return users of your organization. Make sure to include a limit and sorting for pagination..",
        "operationId": "UserService_ListUsers",
        "responses": {
          "200": {
            "description": "A list of all users matching the query",
            "schema": {
              "$ref": "#/definitions/v2ListUsersResponse"
            }
          },
          "400": {
            "description": "invalid list query",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v2ListUsersRequest"
            }
          }
        ],
        "tags": [
          "UserService"
        ]
      }
    },
    "/v2/users/human": {
      "post": {
        "summary": "Create a new human user",
        "description": "Create/import a new user with the type human. The newly created user will get a verification email if either the email address is not marked as verified and you did not request the verification to be returned.",
        "operationId": "UserService_AddHumanUser",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v2AddHumanUserResponse"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v2AddHumanUserRequest"
            }
          }
        ],
        "tags": [
          "UserService"
        ]
      }
    },
    "/v2/users/human/{userId}": {
      "put": {
        "summary": "Update User",
        "description": "Update all information from a user..",
        "operationId": "UserService_UpdateHumanUser",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v2UpdateHumanUserResponse"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserServiceUpdateHumanUserBody"
            }
          }
        ],
        "tags": [
          "UserService"
        ]
      }
    },
    "/v2/users/{userId}": {
      "get": {
        "summary": "User by ID",
        "description": "Returns the full user object (human or machine) including the profile, email, etc..",
        "operationId": "UserService_GetUserByID",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v2GetUserByIDResponse"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "description": "User ID of the user you like to get.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "UserService"
        ]
      },
      "delete": {
        "summary": "Delete user",
        "description": "The state of the user will be changed to 'deleted'. The user will not be able to log in anymore. Endpoints requesting this user will return an error 'User not found..",
        "operationId": "UserService_DeleteUser",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v2DeleteUserResponse"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "UserService"
        ]
      }
    },
    "/v2/users/{userId}/authentication_methods": {
      "get": {
        "summary": "List all possible authentication methods of a user",
        "description": "List all possible authentication methods of a user like password, passwordless, (T)OTP and more..",
        "operationId": "UserService_ListAuthenticationMethodTypes",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v2ListAuthenticationMethodTypesResponse"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "domainQuery.includeWithoutDomain",
            "description": "List also auth method types without domain information like passkey and U2F added through V1 APIs / Login UI.",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "domainQuery.domain",
            "description": "List only auth methods with specific domain.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "UserService"
        ]
      }
    },
    "/v2/users/{userId}/deactivate": {
      "post": {
        "summary": "Deactivate user",
        "description": "The state of the user will be changed to 'deactivated'. The user will not be able to log in anymore. The endpoint returns an error if the user is already in the state 'deactivated'. Use deactivate user when the user should not be able to use the account anymore, but you still need access to the user data..",
        "operationId": "UserService_DeactivateUser",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v2DeactivateUserResponse"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserServiceDeactivateUserBody"
            }
          }
        ],
        "tags": [
          "UserService"
        ]
      }
    },
    "/v2/users/{userId}/email": {
      "post": {
        "summary": "Change the user email",
        "description": "Change the email address of a user. If the state is set to not verified, a verification code will be generated, which can be either returned or sent to the user by email..",
        "operationId": "UserService_SetEmail",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v2SetEmailResponse"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserServiceSetEmailBody"
            }
          }
        ],
        "tags": [
          "UserService"
        ]
      }
    },
    "/v2/users/{userId}/email/resend": {
      "post": {
        "summary": "Resend code to verify user email",
        "description": "Resend code to verify user email.",
        "operationId": "UserService_ResendEmailCode",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v2ResendEmailCodeResponse"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserServiceResendEmailCodeBody"
            }
          }
        ],
        "tags": [
          "UserService"
        ]
      }
    },
    "/v2/users/{userId}/email/verify": {
      "post": {
        "summary": "Verify the email",
        "description": "Verify the email with the generated code..",
        "operationId": "UserService_VerifyEmail",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v2VerifyEmailResponse"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserServiceVerifyEmailBody"
            }
          }
        ],
        "tags": [
          "UserService"
        ]
      }
    },
    "/v2/users/{userId}/invite_code": {
      "post": {
        "summary": "Create an invite code for a user",
        "description": "Create an invite code for a user to initialize their first authentication method (password, passkeys, IdP) depending on the organization's available methods.",
        "operationId": "UserService_CreateInviteCode",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v2CreateInviteCodeResponse"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "sendCode.urlTemplate",
            "description": "Optionally set a url_template, which will be used in the invite mail sent by ZITADEL to guide the user to your invitation page.\nIf no template is set, the default ZITADEL url will be used.\n\nThe following placeholders can be used: UserID, OrgID, Code",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sendCode.applicationName",
            "description": "Optionally set an application name, which will be used in the invite mail sent by ZITADEL.\nIf no application name is set, ZITADEL will be used as default.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "UserService"
        ]
      }
    },
    "/v2/users/{userId}/invite_code/resend": {
      "post": {
        "summary": "Resend an invite code for a user",
        "description": "Resend an invite code for a user to initialize their first authentication method (password, passkeys, IdP) depending on the organization's available methods.\nA resend is only possible if a code has been created previously and sent to the user. If there is no code or it was directly returned, an error will be returned.",
        "operationId": "UserService_ResendInviteCode",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v2ResendInviteCodeResponse"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "UserService"
        ]
      }
    },
    "/v2/users/{userId}/invite_code/verify": {
      "post": {
        "summary": "Verify an invite code for a user",
        "description": "Verify the invite code of a user previously issued. This will set their email to a verified state and\nallow the user to set up their first authentication method (password, passkeys, IdP) depending on the organization's available methods.",
        "operationId": "UserService_VerifyInviteCode",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v2VerifyInviteCodeResponse"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "verificationCode",
            "description": "\"the verification code generated during the invite code request\"",
            "in": "query",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "UserService"
        ]
      }
    },
    "/v2/users/{userId}/links": {
      "post": {
        "summary": "Add link to an identity provider to an user",
        "description": "Add link to an identity provider to an user..",
        "operationId": "UserService_AddIDPLink",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v2AddIDPLinkResponse"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserServiceAddIDPLinkBody"
            }
          }
        ],
        "tags": [
          "UserService"
        ]
      }
    },
    "/v2/users/{userId}/links/_search": {
      "post": {
        "summary": "List links to an identity provider of an user",
        "description": "List links to an identity provider of an user.",
        "operationId": "UserService_ListIDPLinks",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v2ListIDPLinksResponse"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserServiceListIDPLinksBody"
            }
          }
        ],
        "tags": [
          "UserService"
        ]
      }
    },
    "/v2/users/{userId}/links/{idpId}/{linkedUserId}": {
      "delete": {
        "summary": "Remove link of an identity provider to an user",
        "description": "Remove link of an identity provider to an user.",
        "operationId": "UserService_RemoveIDPLink",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v2RemoveIDPLinkResponse"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "idpId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "linkedUserId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserServiceRemoveIDPLinkBody"
            }
          }
        ],
        "tags": [
          "UserService"
        ]
      }
    },
    "/v2/users/{userId}/lock": {
      "post": {
        "summary": "Lock user",
        "description": "The state of the user will be changed to 'locked'. The user will not be able to log in anymore. The endpoint returns an error if the user is already in the state 'locked'. Use this endpoint if the user should not be able to log in temporarily because of an event that happened (wrong password, etc.)..",
        "operationId": "UserService_LockUser",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v2LockUserResponse"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserServiceLockUserBody"
            }
          }
        ],
        "tags": [
          "UserService"
        ]
      }
    },
    "/v2/users/{userId}/otp_email": {
      "delete": {
        "summary": "Remove One-Time-Password (OTP) Email from a user",
        "description": "Remove the configured One-Time-Password (OTP) Email factor of a user. As only one OTP Email per user is allowed, the user will not have OTP Email as a second-factor afterward..",
        "operationId": "UserService_RemoveOTPEmail",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v2RemoveOTPEmailResponse"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "UserService"
        ]
      },
      "post": {
        "summary": "Add OTP Email for a user",
        "description": "Add a new One-Time-Password (OTP) Email factor to the authenticated user. OTP Email will enable the user to verify a OTP with the latest verified email. The email has to be verified to add the second factor..",
        "operationId": "UserService_AddOTPEmail",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v2AddOTPEmailResponse"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserServiceAddOTPEmailBody"
            }
          }
        ],
        "tags": [
          "UserService"
        ]
      }
    },
    "/v2/users/{userId}/otp_sms": {
      "delete": {
        "summary": "Remove One-Time-Password (OTP) SMS from a user",
        "description": "Remove the configured One-Time-Password (OTP) SMS factor of a user. As only one OTP SMS per user is allowed, the user will not have OTP SMS as a second-factor afterward..",
        "operationId": "UserService_RemoveOTPSMS",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v2RemoveOTPSMSResponse"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "UserService"
        ]
      },
      "post": {
        "summary": "Add OTP SMS for a user",
        "description": "Add a new One-Time-Password (OTP) SMS factor to the authenticated user. OTP SMS will enable the user to verify a OTP with the latest verified phone number. The phone number has to be verified to add the second factor..",
        "operationId": "UserService_AddOTPSMS",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v2AddOTPSMSResponse"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserServiceAddOTPSMSBody"
            }
          }
        ],
        "tags": [
          "UserService"
        ]
      }
    },
    "/v2/users/{userId}/passkeys": {
      "post": {
        "summary": "Start the registration of passkey for a user",
        "description": "Start the registration of a passkey for a user, as a response the public key credential creation options are returned, which are used to verify the passkey..",
        "operationId": "UserService_RegisterPasskey",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v2RegisterPasskeyResponse"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserServiceRegisterPasskeyBody"
            }
          }
        ],
        "tags": [
          "UserService"
        ]
      }
    },
    "/v2/users/{userId}/passkeys/_search": {
      "post": {
        "summary": "List passkeys of an user",
        "description": "List passkeys of an user",
        "operationId": "UserService_ListPasskeys",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v2ListPasskeysResponse"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserServiceListPasskeysBody"
            }
          }
        ],
        "tags": [
          "UserService"
        ]
      }
    },
    "/v2/users/{userId}/passkeys/registration_link": {
      "post": {
        "summary": "Create a passkey registration link for a user",
        "description": "Create a passkey registration link which includes a code and either return it or send it to the user..",
        "operationId": "UserService_CreatePasskeyRegistrationLink",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v2CreatePasskeyRegistrationLinkResponse"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserServiceCreatePasskeyRegistrationLinkBody"
            }
          }
        ],
        "tags": [
          "UserService"
        ]
      }
    },
    "/v2/users/{userId}/passkeys/{passkeyId}": {
      "delete": {
        "summary": "Remove passkey from a user",
        "description": "Remove passkey from a user.",
        "operationId": "UserService_RemovePasskey",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v2RemovePasskeyResponse"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "passkeyId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "UserService"
        ]
      },
      "post": {
        "summary": "Verify a passkey for a user",
        "description": "Verify the passkey registration with the public key credential..",
        "operationId": "UserService_VerifyPasskeyRegistration",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v2VerifyPasskeyRegistrationResponse"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "passkeyId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserServiceVerifyPasskeyRegistrationBody"
            }
          }
        ],
        "tags": [
          "UserService"
        ]
      }
    },
    "/v2/users/{userId}/password": {
      "post": {
        "summary": "Change password",
        "description": "Change the password of a user with either a verification code or the current password..",
        "operationId": "UserService_SetPassword",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v2SetPasswordResponse"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v2UserServiceSetPasswordBody"
            }
          }
        ],
        "tags": [
          "UserService"
        ]
      }
    },
    "/v2/users/{userId}/password_reset": {
      "post": {
        "summary": "Request a code to reset a password",
        "description": "Request a code to reset a password..",
        "operationId": "UserService_PasswordReset",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v2PasswordResetResponse"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserServicePasswordResetBody"
            }
          }
        ],
        "tags": [
          "UserService"
        ]
      }
    },
    "/v2/users/{userId}/phone": {
      "delete": {
        "summary": "Delete the user phone",
        "description": "Delete the phone number of a user.",
        "operationId": "UserService_RemovePhone",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v2RemovePhoneResponse"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserServiceRemovePhoneBody"
            }
          }
        ],
        "tags": [
          "UserService"
        ]
      },
      "post": {
        "summary": "Set the user phone",
        "description": "Set the phone number of a user. If the state is set to not verified, a verification code will be generated, which can be either returned or sent to the user by sms..",
        "operationId": "UserService_SetPhone",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v2SetPhoneResponse"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserServiceSetPhoneBody"
            }
          }
        ],
        "tags": [
          "UserService"
        ]
      }
    },
    "/v2/users/{userId}/phone/resend": {
      "post": {
        "summary": "Resend code to verify user phone",
        "description": "Resend code to verify user phone.",
        "operationId": "UserService_ResendPhoneCode",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v2ResendPhoneCodeResponse"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserServiceResendPhoneCodeBody"
            }
          }
        ],
        "tags": [
          "UserService"
        ]
      }
    },
    "/v2/users/{userId}/phone/verify": {
      "post": {
        "summary": "Verify the phone",
        "description": "Verify the phone with the generated code..",
        "operationId": "UserService_VerifyPhone",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v2VerifyPhoneResponse"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserServiceVerifyPhoneBody"
            }
          }
        ],
        "tags": [
          "UserService"
        ]
      }
    },
    "/v2/users/{userId}/reactivate": {
      "post": {
        "summary": "Reactivate user",
        "description": "Reactivate a user with the state 'deactivated'. The user will be able to log in again afterward. The endpoint returns an error if the user is not in the state 'deactivated'..",
        "operationId": "UserService_ReactivateUser",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v2ReactivateUserResponse"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserServiceReactivateUserBody"
            }
          }
        ],
        "tags": [
          "UserService"
        ]
      }
    },
    "/v2/users/{userId}/totp": {
      "delete": {
        "summary": "Remove TOTP generator from a user",
        "description": "Remove the configured TOTP generator of a user. As only one TOTP generator per user is allowed, the user will not have TOTP as a second-factor afterward..",
        "operationId": "UserService_RemoveTOTP",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v2RemoveTOTPResponse"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "UserService"
        ]
      },
      "post": {
        "summary": "Start the registration of a TOTP generator for a user",
        "description": "Start the registration of a TOTP generator for a user, as a response a secret returned, which is used to initialize a TOTP app or device..",
        "operationId": "UserService_RegisterTOTP",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v2RegisterTOTPResponse"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserServiceRegisterTOTPBody"
            }
          }
        ],
        "tags": [
          "UserService"
        ]
      }
    },
    "/v2/users/{userId}/totp/verify": {
      "post": {
        "summary": "Verify a TOTP generator for a user",
        "description": "Verify the TOTP registration with a generated code..",
        "operationId": "UserService_VerifyTOTPRegistration",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v2VerifyTOTPRegistrationResponse"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserServiceVerifyTOTPRegistrationBody"
            }
          }
        ],
        "tags": [
          "UserService"
        ]
      }
    },
    "/v2/users/{userId}/u2f": {
      "post": {
        "summary": "Start the registration of a u2f token for a user",
        "description": "Start the registration of a u2f token for a user, as a response the public key credential creation options are returned, which are used to verify the u2f token..",
        "operationId": "UserService_RegisterU2F",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v2RegisterU2FResponse"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserServiceRegisterU2FBody"
            }
          }
        ],
        "tags": [
          "UserService"
        ]
      }
    },
    "/v2/users/{userId}/u2f/{u2fId}": {
      "delete": {
        "summary": "Remove u2f token from a user",
        "description": "Remove u2f token from a user",
        "operationId": "UserService_RemoveU2F",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v2RemoveU2FResponse"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "u2fId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "UserService"
        ]
      },
      "post": {
        "summary": "Verify a u2f token for a user",
        "description": "Verify the u2f token registration with the public key credential..",
        "operationId": "UserService_VerifyU2FRegistration",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v2VerifyU2FRegistrationResponse"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "u2fId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserServiceVerifyU2FRegistrationBody"
            }
          }
        ],
        "tags": [
          "UserService"
        ]
      }
    },
    "/v2/users/{userId}/unlock": {
      "post": {
        "summary": "Unlock user",
        "description": "The state of the user will be changed to 'locked'. The user will not be able to log in anymore. The endpoint returns an error if the user is already in the state 'locked'. Use this endpoint if the user should not be able to log in temporarily because of an event that happened (wrong password, etc.)..",
        "operationId": "UserService_UnlockUser",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v2UnlockUserResponse"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserServiceUnlockUserBody"
            }
          }
        ],
        "tags": [
          "UserService"
        ]
      }
    }
  },
  "definitions": {
    "UserServiceAddIDPLinkBody": {
      "type": "object",
      "properties": {
        "idpLink": {
          "$ref": "#/definitions/v2IDPLink"
        }
      }
    },
    "UserServiceAddOTPEmailBody": {
      "type": "object"
    },
    "UserServiceAddOTPSMSBody": {
      "type": "object"
    },
    "UserServiceCreatePasskeyRegistrationLinkBody": {
      "type": "object",
      "properties": {
        "sendLink": {
          "$ref": "#/definitions/v2SendPasskeyRegistrationLink"
        },
        "returnCode": {
          "$ref": "#/definitions/v2ReturnPasskeyRegistrationCode"
        }
      }
    },
    "UserServiceDeactivateUserBody": {
      "type": "object"
    },
    "UserServiceListIDPLinksBody": {
      "type": "object",
      "properties": {
        "query": {
          "$ref": "#/definitions/v2ListQuery",
          "title": "list limitations and ordering"
        }
      }
    },
    "UserServiceListPasskeysBody": {
      "type": "object"
    },
    "UserServiceLockUserBody": {
      "type": "object"
    },
    "UserServicePasswordResetBody": {
      "type": "object",
      "properties": {
        "sendLink": {
          "$ref": "#/definitions/v2SendPasswordResetLink"
        },
        "returnCode": {
          "$ref": "#/definitions/v2ReturnPasswordResetCode"
        }
      }
    },
    "UserServiceReactivateUserBody": {
      "type": "object"
    },
    "UserServiceRegisterPasskeyBody": {
      "type": "object",
      "properties": {
        "code": {
          "$ref": "#/definitions/v2PasskeyRegistrationCode",
          "description": "\"one time code generated by ZITADEL; required to start the passkey registration without user authentication\""
        },
        "authenticator": {
          "$ref": "#/definitions/v2PasskeyAuthenticator",
          "description": "\"Optionally specify the authenticator type of the passkey device (platform or cross-platform). If none is provided, both values are allowed.\""
        },
        "domain": {
          "type": "string",
          "description": "\"Domain on which the user is authenticated.\""
        }
      }
    },
    "UserServiceRegisterTOTPBody": {
      "type": "object"
    },
    "UserServiceRegisterU2FBody": {
      "type": "object",
      "properties": {
        "domain": {
          "type": "string",
          "description": "\"Domain on which the user is authenticated.\""
        }
      }
    },
    "UserServiceRemoveIDPLinkBody": {
      "type": "object"
    },
    "UserServiceRemovePhoneBody": {
      "type": "object"
    },
    "UserServiceResendEmailCodeBody": {
      "type": "object",
      "properties": {
        "sendCode": {
          "$ref": "#/definitions/v2SendEmailVerificationCode"
        },
        "returnCode": {
          "$ref": "#/definitions/v2ReturnEmailVerificationCode"
        }
      }
    },
    "UserServiceResendPhoneCodeBody": {
      "type": "object",
      "properties": {
        "sendCode": {
          "$ref": "#/definitions/v2SendPhoneVerificationCode"
        },
        "returnCode": {
          "$ref": "#/definitions/v2ReturnPhoneVerificationCode"
        }
      }
    },
    "UserServiceRetrieveIdentityProviderIntentBody": {
      "type": "object",
      "properties": {
        "idpIntentToken": {
          "type": "string",
          "example": "SJKL3ioIDpo342ioqw98fjp3sdf32wahb=",
          "description": "token of the idp intent, previously returned on the success response of the IDP callback",
          "maxLength": 200,
          "minLength": 1
        }
      }
    },
    "UserServiceSetEmailBody": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string",
          "example": "mini@mouse.com",
          "maxLength": 200,
          "minLength": 1
        },
        "sendCode": {
          "$ref": "#/definitions/v2SendEmailVerificationCode"
        },
        "returnCode": {
          "$ref": "#/definitions/v2ReturnEmailVerificationCode"
        },
        "isVerified": {
          "type": "boolean"
        }
      },
      "required": [
        "email"
      ]
    },
    "UserServiceSetPhoneBody": {
      "type": "object",
      "properties": {
        "phone": {
          "type": "string",
          "example": "+41791234567",
          "maxLength": 200,
          "minLength": 1
        },
        "sendCode": {
          "$ref": "#/definitions/v2SendPhoneVerificationCode"
        },
        "returnCode": {
          "$ref": "#/definitions/v2ReturnPhoneVerificationCode"
        },
        "isVerified": {
          "type": "boolean"
        }
      },
      "required": [
        "phone"
      ]
    },
    "UserServiceUnlockUserBody": {
      "type": "object"
    },
    "UserServiceUpdateHumanUserBody": {
      "type": "object",
      "properties": {
        "username": {
          "type": "string",
          "example": "minnie-mouse",
          "maxLength": 200,
          "minLength": 1
        },
        "profile": {
          "$ref": "#/definitions/v2SetHumanProfile"
        },
        "email": {
          "$ref": "#/definitions/v2SetHumanEmail"
        },
        "phone": {
          "$ref": "#/definitions/v2SetHumanPhone"
        },
        "password": {
          "$ref": "#/definitions/userv2SetPassword"
        }
      }
    },
    "UserServiceVerifyEmailBody": {
      "type": "object",
      "properties": {
        "verificationCode": {
          "type": "string",
          "example": "SKJd342k",
          "description": "\"the verification code generated during the set email request\"",
          "maxLength": 20,
          "minLength": 1
        }
      },
      "required": [
        "verificationCode"
      ]
    },
    "UserServiceVerifyPasskeyRegistrationBody": {
      "type": "object",
      "properties": {
        "publicKeyCredential": {
          "type": "object",
          "example": {
            "type": "public-key",
            "id": "pawVarF4xPxLFmfCnRkwXWeTrKGzabcAi92LEI1WC00",
            "rawId": "pawVarF4xPxLFmfCnRkwXWeTrKGzabcAi92LEI1WC00",
            "response": {
              "attestationObject": "o2NmbXRmcGFja2VkZ2F0dFN0bXSiY2FsZyZjc2lnWEcwRQIgRKS3VpeE9tfExXRzkoUKnG4rQWPvtSSt4YtDGgTx32oCIQDPey-2YJ4uIg-QCM4jj6aE2U3tgMFM_RP7Efx6xRu3JGhhdXRoRGF0YVikSZYN5YgOjGh0NBcPZHZgW4_krrmihjLHmVzzuoMdl2NFAAAAADju76085Yhmlt1CEOHkwLQAIKWsFWqxeMT8SxZnwp0ZMF1nk6yhs2m3AIvdixCNVgtNpQECAyYgASFYIMGUDSP2FAQn2MIfPMy7cyB_Y30VqixVgGULTBtFjfRiIlggjUGfQo3_-CrMmH3S-ZQkFKWKnNBQEAMkFtG-9A4zqW0",
              "clientDataJSON": "eyJ0eXBlIjoid2ViYXV0aG4uY3JlYXRlIiwiY2hhbGxlbmdlIjoiQlhXdHh0WGxJeFZZa0pHT1dVaUVmM25zby02aXZKdWw2YmNmWHdMVlFIayIsIm9yaWdpbiI6Imh0dHBzOi8vbG9jYWxob3N0OjgwODAifQ"
            }
          },
          "description": "PublicKeyCredential Interface. Generated helper methods populate the field from JSON created by a WebauthN client. See also:  https://www.w3.org/TR/webauthn/#publickeycredential",
          "maxLength": 1048576,
          "minLength": 55
        },
        "passkeyName": {
          "type": "string",
          "example": "fido key",
          "maxLength": 200,
          "minLength": 1
        }
      },
      "required": [
        "publicKeyCredential",
        "passkeyName"
      ]
    },
    "UserServiceVerifyPhoneBody": {
      "type": "object",
      "properties": {
        "verificationCode": {
          "type": "string",
          "example": "SKJd342k",
          "description": "\"the verification code generated during the set phone request\"",
          "maxLength": 20,
          "minLength": 1
        }
      },
      "required": [
        "verificationCode"
      ]
    },
    "UserServiceVerifyTOTPRegistrationBody": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string",
          "example": "123456",
          "description": "Code generated by TOTP app or device"
        }
      },
      "required": [
        "code"
      ]
    },
    "UserServiceVerifyU2FRegistrationBody": {
      "type": "object",
      "properties": {
        "publicKeyCredential": {
          "type": "object",
          "example": {
            "type": "public-key",
            "id": "pawVarF4xPxLFmfCnRkwXWeTrKGzabcAi92LEI1WC00",
            "rawId": "pawVarF4xPxLFmfCnRkwXWeTrKGzabcAi92LEI1WC00",
            "response": {
              "attestationObject": "o2NmbXRmcGFja2VkZ2F0dFN0bXSiY2FsZyZjc2lnWEcwRQIgRKS3VpeE9tfExXRzkoUKnG4rQWPvtSSt4YtDGgTx32oCIQDPey-2YJ4uIg-QCM4jj6aE2U3tgMFM_RP7Efx6xRu3JGhhdXRoRGF0YVikSZYN5YgOjGh0NBcPZHZgW4_krrmihjLHmVzzuoMdl2NFAAAAADju76085Yhmlt1CEOHkwLQAIKWsFWqxeMT8SxZnwp0ZMF1nk6yhs2m3AIvdixCNVgtNpQECAyYgASFYIMGUDSP2FAQn2MIfPMy7cyB_Y30VqixVgGULTBtFjfRiIlggjUGfQo3_-CrMmH3S-ZQkFKWKnNBQEAMkFtG-9A4zqW0",
              "clientDataJSON": "eyJ0eXBlIjoid2ViYXV0aG4uY3JlYXRlIiwiY2hhbGxlbmdlIjoiQlhXdHh0WGxJeFZZa0pHT1dVaUVmM25zby02aXZKdWw2YmNmWHdMVlFIayIsIm9yaWdpbiI6Imh0dHBzOi8vbG9jYWxob3N0OjgwODAifQ"
            }
          },
          "description": "PublicKeyCredential Interface. Generated helper methods populate the field from JSON created by a WebauthN client. See also:  https://www.w3.org/TR/webauthn/#publickeycredential",
          "maxLength": 1048576,
          "minLength": 55
        },
        "tokenName": {
          "type": "string",
          "example": "fido key",
          "maxLength": 200,
          "minLength": 1
        }
      },
      "required": [
        "publicKeyCredential",
        "tokenName"
      ]
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "@type": {
          "type": "string"
        }
      },
      "additionalProperties": {}
    },
    "protobufNullValue": {
      "type": "string",
      "enum": [
        "NULL_VALUE"
      ],
      "default": "NULL_VALUE",
      "description": "`NullValue` is a singleton enumeration to represent the null value for the\n`Value` type union.\n\nThe JSON representation for `NullValue` is JSON `null`.\n\n - NULL_VALUE: Null value."
    },
    "rpcStatus": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    },
    "userv2SetPassword": {
      "type": "object",
      "properties": {
        "password": {
          "$ref": "#/definitions/v2Password"
        },
        "hashedPassword": {
          "$ref": "#/definitions/v2HashedPassword"
        },
        "currentPassword": {
          "type": "string",
          "example": "Secr3tP4ssw0rd!",
          "maxLength": 200,
          "minLength": 1
        },
        "verificationCode": {
          "type": "string",
          "example": "SKJd342k",
          "description": "\"the verification code generated during password reset request\"",
          "maxLength": 20,
          "minLength": 1
        }
      },
      "required": [
        "currentPassword",
        "verificationCode"
      ]
    },
    "userv2Type": {
      "type": "string",
      "enum": [
        "TYPE_UNSPECIFIED",
        "TYPE_HUMAN",
        "TYPE_MACHINE"
      ],
      "default": "TYPE_UNSPECIFIED"
    },
    "v2AccessTokenType": {
      "type": "string",
      "enum": [
        "ACCESS_TOKEN_TYPE_BEARER",
        "ACCESS_TOKEN_TYPE_JWT"
      ],
      "default": "ACCESS_TOKEN_TYPE_BEARER"
    },
    "v2AddHumanUserRequest": {
      "type": "object",
      "properties": {
        "userId": {
          "type": "string",
          "example": "d654e6ba-70a3-48ef-a95d-37c8d8a7901a",
          "description": "optionally set your own id unique for the user.",
          "maxLength": 200,
          "minLength": 1
        },
        "username": {
          "type": "string",
          "example": "minnie-mouse",
          "description": "optionally set a unique username, if none is provided the email will be used.",
          "maxLength": 200,
          "minLength": 1
        },
        "organization": {
          "$ref": "#/definitions/v2Organization"
        },
        "profile": {
          "$ref": "#/definitions/v2SetHumanProfile"
        },
        "email": {
          "$ref": "#/definitions/v2SetHumanEmail"
        },
        "phone": {
          "$ref": "#/definitions/v2SetHumanPhone"
        },
        "metadata": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v2SetMetadataEntry"
          }
        },
        "password": {
          "$ref": "#/definitions/v2Password"
        },
        "hashedPassword": {
          "$ref": "#/definitions/v2HashedPassword"
        },
        "idpLinks": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v2IDPLink"
          }
        },
        "totpSecret": {
          "type": "string",
          "example": "TJOPWSDYILLHXFV4MLKNNJOWFG7VSDCK",
          "description": "An Implementation of RFC 6238 is used, with HMAC-SHA-1 and time-step of 30 seconds.\nCurrently no other options are supported, and if anything different is used the validation will fail.",
          "maxLength": 200,
          "minLength": 1
        }
      },
      "required": [
        "profile",
        "email"
      ]
    },
    "v2AddHumanUserResponse": {
      "type": "object",
      "properties": {
        "userId": {
          "type": "string"
        },
        "details": {
          "$ref": "#/definitions/v2Details"
        },
        "emailCode": {
          "type": "string"
        },
        "phoneCode": {
          "type": "string"
        }
      }
    },
    "v2AddIDPLinkResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v2Details"
        }
      }
    },
    "v2AddOTPEmailResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v2Details"
        }
      }
    },
    "v2AddOTPSMSResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v2Details"
        }
      }
    },
    "v2AndQuery": {
      "type": "object",
      "properties": {
        "queries": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v2SearchQuery"
          },
          "description": "the sub queries to 'AND'"
        }
      },
      "description": "Connect multiple sub-condition with and AND operator."
    },
    "v2AuthFactorState": {
      "type": "string",
      "enum": [
        "AUTH_FACTOR_STATE_UNSPECIFIED",
        "AUTH_FACTOR_STATE_NOT_READY",
        "AUTH_FACTOR_STATE_READY",
        "AUTH_FACTOR_STATE_REMOVED"
      ],
      "default": "AUTH_FACTOR_STATE_UNSPECIFIED"
    },
    "v2AuthenticationMethodType": {
      "type": "string",
      "enum": [
        "AUTHENTICATION_METHOD_TYPE_UNSPECIFIED",
        "AUTHENTICATION_METHOD_TYPE_PASSWORD",
        "AUTHENTICATION_METHOD_TYPE_PASSKEY",
        "AUTHENTICATION_METHOD_TYPE_IDP",
        "AUTHENTICATION_METHOD_TYPE_TOTP",
        "AUTHENTICATION_METHOD_TYPE_U2F",
        "AUTHENTICATION_METHOD_TYPE_OTP_SMS",
        "AUTHENTICATION_METHOD_TYPE_OTP_EMAIL"
      ],
      "default": "AUTHENTICATION_METHOD_TYPE_UNSPECIFIED"
    },
    "v2CreateInviteCodeResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v2Details"
        },
        "inviteCode": {
          "type": "string",
          "description": "The invite code is returned if the verification was set to return_code."
        }
      }
    },
    "v2CreatePasskeyRegistrationLinkResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v2Details"
        },
        "code": {
          "$ref": "#/definitions/v2PasskeyRegistrationCode",
          "description": "\"one time code generated by ZITADEL; required to start the passkey registration without user authentication\"",
          "title": "in case the medium was set to return_code, the code will be returned"
        }
      }
    },
    "v2DeactivateUserResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v2Details"
        }
      }
    },
    "v2DeleteUserResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v2Details"
        }
      }
    },
    "v2Details": {
      "type": "object",
      "properties": {
        "sequence": {
          "type": "string",
          "format": "uint64",
          "example": "2",
          "description": "on read: the sequence of the last event reduced by the projection\n\non manipulation: the timestamp of the event(s) added by the manipulation",
          "title": "sequence represents the order of events. It's always counting"
        },
        "changeDate": {
          "type": "string",
          "format": "date-time",
          "description": "on read: the timestamp of the last event reduced by the projection\n\non manipulation: the timestamp of the event(s) added by the manipulation",
          "title": "change_date is the timestamp when the object was changed"
        },
        "resourceOwner": {
          "type": "string",
          "example": "69629023906488334",
          "title": "resource_owner is the organization or instance_id an object belongs to"
        }
      }
    },
    "v2DisplayNameQuery": {
      "type": "object",
      "properties": {
        "displayName": {
          "type": "string",
          "example": "Gigi Giraffe",
          "maxLength": 200,
          "minLength": 1
        },
        "method": {
          "$ref": "#/definitions/v2TextQueryMethod",
          "description": "defines which text equality method is used"
        }
      },
      "description": "Query for users with a specific display name.",
      "required": [
        "displayName"
      ]
    },
    "v2DomainQuery": {
      "type": "object",
      "properties": {
        "includeWithoutDomain": {
          "type": "boolean",
          "description": "List also auth method types without domain information like passkey and U2F added through V1 APIs / Login UI."
        },
        "domain": {
          "type": "string",
          "example": "example.com",
          "description": "List only auth methods with specific domain.",
          "maxLength": 200,
          "minLength": 1
        }
      }
    },
    "v2EmailQuery": {
      "type": "object",
      "properties": {
        "emailAddress": {
          "type": "string",
          "example": "gigi@zitadel.com",
          "description": "email address of the user",
          "maxLength": 200
        },
        "method": {
          "$ref": "#/definitions/v2TextQueryMethod",
          "description": "defines which text equality method is used"
        }
      },
      "description": "Query for users with a specific email.",
      "required": [
        "emailAddress"
      ]
    },
    "v2FirstNameQuery": {
      "type": "object",
      "properties": {
        "firstName": {
          "type": "string",
          "example": "Gigi",
          "maxLength": 200,
          "minLength": 1
        },
        "method": {
          "$ref": "#/definitions/v2TextQueryMethod",
          "description": "defines which text equality method is used"
        }
      },
      "description": "Query for users with a specific first name.",
      "required": [
        "firstName"
      ]
    },
    "v2Gender": {
      "type": "string",
      "enum": [
        "GENDER_UNSPECIFIED",
        "GENDER_FEMALE",
        "GENDER_MALE",
        "GENDER_DIVERSE"
      ],
      "default": "GENDER_UNSPECIFIED"
    },
    "v2GetUserByIDResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v2Details",
          "title": "deprecated: details is moved into user"
        },
        "user": {
          "$ref": "#/definitions/v2User"
        }
      }
    },
    "v2HashedPassword": {
      "type": "object",
      "properties": {
        "hash": {
          "type": "string",
          "example": "$2a$12$lJ08fqVr8bFJilRVnDT9QeULI7YW.nT3iwUv6dyg0aCrfm3UY8XR2",
          "description": "\"Encoded hash of a password in Modular Crypt Format: https://zitadel.com/docs/concepts/architecture/secrets#hashed-secrets\"",
          "maxLength": 200,
          "minLength": 1
        },
        "changeRequired": {
          "type": "boolean"
        }
      },
      "required": [
        "hash"
      ]
    },
    "v2HumanEmail": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string",
          "example": "mini@mouse.com",
          "maxLength": 200,
          "minLength": 1
        },
        "isVerified": {
          "type": "boolean"
        }
      }
    },
    "v2HumanPhone": {
      "type": "object",
      "properties": {
        "phone": {
          "type": "string",
          "example": "+41791234567",
          "maxLength": 200
        },
        "isVerified": {
          "type": "boolean"
        }
      }
    },
    "v2HumanProfile": {
      "type": "object",
      "properties": {
        "givenName": {
          "type": "string",
          "example": "Minnie",
          "maxLength": 200,
          "minLength": 1
        },
        "familyName": {
          "type": "string",
          "example": "Mouse",
          "maxLength": 200,
          "minLength": 1
        },
        "nickName": {
          "type": "string",
          "example": "Mini",
          "maxLength": 200
        },
        "displayName": {
          "type": "string",
          "example": "Minnie Mouse",
          "maxLength": 200
        },
        "preferredLanguage": {
          "type": "string",
          "example": "en",
          "maxLength": 10
        },
        "gender": {
          "$ref": "#/definitions/v2Gender",
          "example": "GENDER_FEMALE"
        },
        "avatarUrl": {
          "type": "string",
          "example": "https://api.zitadel.ch/assets/v1/avatar-32432jkh4kj32",
          "description": "avatar URL of the user"
        }
      }
    },
    "v2HumanUser": {
      "type": "object",
      "properties": {
        "userId": {
          "type": "string",
          "example": "d654e6ba-70a3-48ef-a95d-37c8d8a7901a",
          "description": "Unique identifier of the user."
        },
        "state": {
          "$ref": "#/definitions/v2UserState",
          "description": "current state of the user"
        },
        "username": {
          "type": "string",
          "example": "minnie-mouse",
          "description": "Username of the user, which can be globally unique or unique on organization level."
        },
        "loginNames": {
          "type": "array",
          "example": [
            "gigi@zitadel.com",
            "gigi@zitadel.zitadel.ch"
          ],
          "items": {
            "type": "string"
          },
          "description": "Possible usable login names for the user."
        },
        "preferredLoginName": {
          "type": "string",
          "example": "gigi@zitadel.com",
          "description": "Preferred login name of the user."
        },
        "profile": {
          "$ref": "#/definitions/v2HumanProfile",
          "description": "Profile information of the user."
        },
        "email": {
          "$ref": "#/definitions/v2HumanEmail",
          "description": "Email of the user, if defined."
        },
        "phone": {
          "$ref": "#/definitions/v2HumanPhone",
          "description": "Phone of the user, if defined."
        },
        "passwordChangeRequired": {
          "type": "boolean",
          "description": "User is required to change the used password on the next login."
        },
        "passwordChanged": {
          "type": "string",
          "format": "date-time",
          "description": "The time the user last changed their password."
        }
      }
    },
    "v2IDPInformation": {
      "type": "object",
      "properties": {
        "oauth": {
          "$ref": "#/definitions/v2IDPOAuthAccessInformation",
          "description": "OAuth/OIDC access (and id_token) returned by the identity provider"
        },
        "ldap": {
          "$ref": "#/definitions/v2IDPLDAPAccessInformation",
          "description": "LDAP entity attributes returned by the identity provider"
        },
        "saml": {
          "$ref": "#/definitions/v2IDPSAMLAccessInformation",
          "description": "SAMLResponse returned by the identity provider"
        },
        "idpId": {
          "type": "string",
          "example": "d654e6ba-70a3-48ef-a95d-37c8d8a7901a",
          "description": "ID of the identity provider"
        },
        "userId": {
          "type": "string",
          "example": "6516849804890468048461403518",
          "description": "ID of the user of the identity provider"
        },
        "userName": {
          "type": "string",
          "example": "user@external.com",
          "description": "username of the user of the identity provider"
        },
        "rawInformation": {
          "type": "object",
          "description": "complete information returned by the identity provider"
        }
      }
    },
    "v2IDPIntent": {
      "type": "object",
      "properties": {
        "idpIntentId": {
          "type": "string",
          "example": "163840776835432705",
          "description": "ID of the IDP intent",
          "maxLength": 200,
          "minLength": 1
        },
        "idpIntentToken": {
          "type": "string",
          "example": "SJKL3ioIDpo342ioqw98fjp3sdf32wahb=",
          "description": "token of the IDP intent",
          "maxLength": 200,
          "minLength": 1
        },
        "userId": {
          "type": "string",
          "example": "163840776835432345",
          "description": "ID of the ZITADEL user if external user already linked",
          "maxLength": 200
        }
      }
    },
    "v2IDPLDAPAccessInformation": {
      "type": "object",
      "properties": {
        "attributes": {
          "type": "object"
        }
      }
    },
    "v2IDPLink": {
      "type": "object",
      "properties": {
        "idpId": {
          "type": "string",
          "example": "d654e6ba-70a3-48ef-a95d-37c8d8a7901a",
          "description": "ID of the identity provider",
          "maxLength": 200,
          "minLength": 1
        },
        "userId": {
          "type": "string",
          "example": "6516849804890468048461403518",
          "description": "ID of the user of the identity provider",
          "maxLength": 200,
          "minLength": 1
        },
        "userName": {
          "type": "string",
          "example": "user@external.com",
          "description": "username of the user of the identity provider",
          "maxLength": 200,
          "minLength": 1
        }
      }
    },
    "v2IDPOAuthAccessInformation": {
      "type": "object",
      "properties": {
        "accessToken": {
          "type": "string"
        },
        "idToken": {
          "type": "string"
        }
      }
    },
    "v2IDPSAMLAccessInformation": {
      "type": "object",
      "properties": {
        "assertion": {
          "type": "string",
          "format": "byte"
        }
      }
    },
    "v2InUserEmailsQuery": {
      "type": "object",
      "properties": {
        "userEmails": {
          "type": "array",
          "example": [
            "test@example.com",
            "test@example.org"
          ],
          "items": {
            "type": "string"
          },
          "description": "the emails of the users to include"
        }
      },
      "description": "Query for users with email in list of emails."
    },
    "v2InUserIDQuery": {
      "type": "object",
      "properties": {
        "userIds": {
          "type": "array",
          "example": [
            "69629023906488334",
            "69622366012355662"
          ],
          "items": {
            "type": "string"
          },
          "description": "the ids of the users to include"
        }
      },
      "description": "Query for users with ID in list of IDs."
    },
    "v2LDAPCredentials": {
      "type": "object",
      "properties": {
        "username": {
          "type": "string",
          "example": "username",
          "description": "Username used to login through LDAP",
          "maxLength": 200,
          "minLength": 1
        },
        "password": {
          "type": "string",
          "example": "Password1!",
          "description": "Password used to login through LDAP",
          "maxLength": 200,
          "minLength": 1
        }
      }
    },
    "v2LastNameQuery": {
      "type": "object",
      "properties": {
        "lastName": {
          "type": "string",
          "example": "Giraffe",
          "maxLength": 200,
          "minLength": 1
        },
        "method": {
          "$ref": "#/definitions/v2TextQueryMethod",
          "description": "defines which text equality method is used"
        }
      },
      "description": "Query for users with a specific last name.",
      "required": [
        "lastName"
      ]
    },
    "v2ListAuthenticationMethodTypesResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v2ListDetails"
        },
        "authMethodTypes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v2AuthenticationMethodType"
          }
        }
      }
    },
    "v2ListDetails": {
      "type": "object",
      "properties": {
        "totalResult": {
          "type": "string",
          "format": "uint64",
          "example": "2"
        },
        "processedSequence": {
          "type": "string",
          "format": "uint64",
          "example": "267831"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "description": "the last time the projection got updated"
        }
      }
    },
    "v2ListIDPLinksResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v2ListDetails"
        },
        "result": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v2IDPLink"
          }
        }
      }
    },
    "v2ListPasskeysResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v2ListDetails"
        },
        "result": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v2Passkey"
          }
        }
      }
    },
    "v2ListQuery": {
      "type": "object",
      "properties": {
        "offset": {
          "type": "string",
          "format": "uint64",
          "example": "0"
        },
        "limit": {
          "type": "integer",
          "format": "int64",
          "example": 100,
          "description": "Maximum amount of events returned. The default is set to 1000 in https://github.com/zitadel/zitadel/blob/new-eventstore/cmd/zitadel/startup.yaml. If the limit exceeds the maximum configured ZITADEL will throw an error. If no limit is present the default is taken."
        },
        "asc": {
          "type": "boolean",
          "description": "default is descending"
        }
      },
      "description": "Object unspecific list filters like offset, limit and asc/desc.",
      "title": "General List Query"
    },
    "v2ListUsersRequest": {
      "type": "object",
      "properties": {
        "query": {
          "$ref": "#/definitions/v2ListQuery",
          "title": "list limitations and ordering"
        },
        "sortingColumn": {
          "$ref": "#/definitions/v2UserFieldName",
          "title": "the field the result is sorted"
        },
        "queries": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v2SearchQuery"
          },
          "title": "criteria the client is looking for"
        }
      }
    },
    "v2ListUsersResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v2ListDetails"
        },
        "sortingColumn": {
          "$ref": "#/definitions/v2UserFieldName"
        },
        "result": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v2User"
          }
        }
      }
    },
    "v2LockUserResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v2Details"
        }
      }
    },
    "v2LoginNameQuery": {
      "type": "object",
      "properties": {
        "loginName": {
          "type": "string",
          "example": "gigi@zitadel.cloud",
          "maxLength": 200,
          "minLength": 1
        },
        "method": {
          "$ref": "#/definitions/v2TextQueryMethod",
          "description": "defines which text equality method is used"
        }
      },
      "description": "Query for users with a specific state.",
      "required": [
        "loginName"
      ]
    },
    "v2MachineUser": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "example": "zitadel"
        },
        "description": {
          "type": "string",
          "example": "The one and only IAM"
        },
        "hasSecret": {
          "type": "boolean",
          "example": "true"
        },
        "accessTokenType": {
          "$ref": "#/definitions/v2AccessTokenType",
          "description": "Type of access token to receive"
        }
      }
    },
    "v2NickNameQuery": {
      "type": "object",
      "properties": {
        "nickName": {
          "type": "string",
          "example": "Gigi",
          "maxLength": 200,
          "minLength": 1
        },
        "method": {
          "$ref": "#/definitions/v2TextQueryMethod",
          "description": "defines which text equality method is used"
        }
      },
      "description": "Query for users with a specific nickname.",
      "required": [
        "nickName"
      ]
    },
    "v2NotQuery": {
      "type": "object",
      "properties": {
        "query": {
          "$ref": "#/definitions/v2SearchQuery",
          "description": "the sub query to negate (NOT)"
        }
      },
      "description": "Negate the sub-condition."
    },
    "v2NotificationType": {
      "type": "string",
      "enum": [
        "NOTIFICATION_TYPE_Unspecified",
        "NOTIFICATION_TYPE_Email",
        "NOTIFICATION_TYPE_SMS"
      ],
      "default": "NOTIFICATION_TYPE_Unspecified"
    },
    "v2OrQuery": {
      "type": "object",
      "properties": {
        "queries": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v2SearchQuery"
          },
          "description": "the sub queries to 'OR'"
        }
      },
      "description": "Connect multiple sub-condition with and OR operator."
    },
    "v2Organization": {
      "type": "object",
      "properties": {
        "orgId": {
          "type": "string"
        },
        "orgDomain": {
          "type": "string"
        }
      }
    },
    "v2OrganizationIdQuery": {
      "type": "object",
      "properties": {
        "organizationId": {
          "type": "string",
          "example": "69629023906488334",
          "maxLength": 200,
          "minLength": 1
        }
      },
      "description": "Query for users under a specific organization as resource owner.",
      "required": [
        "organizationId"
      ]
    },
    "v2Passkey": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "example": "69629023906488334"
        },
        "state": {
          "$ref": "#/definitions/v2AuthFactorState",
          "description": "current state of the passkey"
        },
        "name": {
          "type": "string",
          "example": "fido key",
          "maxLength": 200,
          "minLength": 1
        }
      }
    },
    "v2PasskeyAuthenticator": {
      "type": "string",
      "enum": [
        "PASSKEY_AUTHENTICATOR_UNSPECIFIED",
        "PASSKEY_AUTHENTICATOR_PLATFORM",
        "PASSKEY_AUTHENTICATOR_CROSS_PLATFORM"
      ],
      "default": "PASSKEY_AUTHENTICATOR_UNSPECIFIED"
    },
    "v2PasskeyRegistrationCode": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "example": "e2a48d6a-362b-4db6-a1fb-34feab84dc62",
          "description": "\"id to the one time code generated by ZITADEL\"",
          "maxLength": 200
        },
        "code": {
          "type": "string",
          "example": "SomeSpecialCode",
          "description": "\"one time code generated by ZITADEL\"",
          "maxLength": 200
        }
      },
      "required": [
        "id",
        "code"
      ]
    },
    "v2Password": {
      "type": "object",
      "properties": {
        "password": {
          "type": "string",
          "example": "Secr3tP4ssw0rd!",
          "maxLength": 200,
          "minLength": 1
        },
        "changeRequired": {
          "type": "boolean"
        }
      },
      "required": [
        "password"
      ]
    },
    "v2PasswordResetResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v2Details"
        },
        "verificationCode": {
          "type": "string",
          "title": "in case the medium was set to return_code, the code will be returned"
        }
      }
    },
    "v2ReactivateUserResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v2Details"
        }
      }
    },
    "v2RedirectURLs": {
      "type": "object",
      "properties": {
        "successUrl": {
          "type": "string",
          "example": "https://custom.com/login/idp/success",
          "description": "URL on which the user will be redirected after a successful login",
          "maxLength": 2048,
          "minLength": 1
        },
        "failureUrl": {
          "type": "string",
          "example": "https://custom.com/login/idp/fail",
          "description": "URL on which the user will be redirected after a failed login",
          "maxLength": 2048,
          "minLength": 1
        }
      }
    },
    "v2RegisterPasskeyResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v2Details"
        },
        "passkeyId": {
          "type": "string",
          "example": "163840776835432705"
        },
        "publicKeyCredentialCreationOptions": {
          "type": "object",
          "example": {
            "publicKey": {
              "attestation": "none",
              "authenticatorSelection": {
                "userVerification": "required"
              },
              "challenge": "XaMYwWOZ5hj6pwtwJJlpcI-ExkO5TxevBMG4R8DoKQQ",
              "excludeCredentials": [
                {
                  "id": "tVp1QfYhT8DkyEHVrv7blnpAo2YJzbZgZNBf7zPs6CI",
                  "type": "public-key"
                }
              ],
              "pubKeyCredParams": [
                {
                  "alg": -7,
                  "type": "public-key"
                }
              ],
              "rp": {
                "id": "localhost",
                "name": "ZITADEL"
              },
              "timeout": 300000,
              "user": {
                "displayName": "Tim Mohlmann",
                "id": "MjE1NTk4MDAwNDY0OTk4OTQw",
                "name": "tim"
              }
            }
          },
          "description": "Options for Credential Creation (dictionary PublicKeyCredentialCreationOptions). Generated helper methods transform the field to JSON, for use in a WebauthN client. See also:  https://www.w3.org/TR/webauthn/#dictdef-publickeycredentialcreationoptions"
        }
      }
    },
    "v2RegisterTOTPResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v2Details"
        },
        "uri": {
          "type": "string",
          "example": "otpauth://totp/ZITADEL:gigi@acme.zitadel.cloud?algorithm=SHA1\u0026digits=6\u0026issuer=ZITADEL\u0026period=30\u0026secret=TJOPWSDYILLHXFV4MLKNNJOWFG7VSDCK"
        },
        "secret": {
          "type": "string",
          "example": "TJOPWSDYILLHXFV4MLKNNJOWFG7VSDCK"
        }
      }
    },
    "v2RegisterU2FResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v2Details"
        },
        "u2fId": {
          "type": "string",
          "example": "163840776835432705"
        },
        "publicKeyCredentialCreationOptions": {
          "type": "object",
          "example": {
            "publicKey": {
              "attestation": "none",
              "authenticatorSelection": {
                "userVerification": "required"
              },
              "challenge": "XaMYwWOZ5hj6pwtwJJlpcI-ExkO5TxevBMG4R8DoKQQ",
              "excludeCredentials": [
                {
                  "id": "tVp1QfYhT8DkyEHVrv7blnpAo2YJzbZgZNBf7zPs6CI",
                  "type": "public-key"
                }
              ],
              "pubKeyCredParams": [
                {
                  "alg": -7,
                  "type": "public-key"
                }
              ],
              "rp": {
                "id": "localhost",
                "name": "ZITADEL"
              },
              "timeout": 300000,
              "user": {
                "displayName": "Tim Mohlmann",
                "id": "MjE1NTk4MDAwNDY0OTk4OTQw",
                "name": "tim"
              }
            }
          },
          "description": "Options for Credential Creation (dictionary PublicKeyCredentialCreationOptions). Generated helper methods transform the field to JSON, for use in a WebauthN client. See also:  https://www.w3.org/TR/webauthn/#dictdef-publickeycredentialcreationoptions"
        }
      }
    },
    "v2RemoveIDPLinkResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v2Details"
        }
      }
    },
    "v2RemoveOTPEmailResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v2Details"
        }
      }
    },
    "v2RemoveOTPSMSResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v2Details"
        }
      }
    },
    "v2RemovePasskeyResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v2Details"
        }
      }
    },
    "v2RemovePhoneResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v2Details"
        }
      }
    },
    "v2RemoveTOTPResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v2Details"
        }
      }
    },
    "v2RemoveU2FResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v2Details"
        }
      }
    },
    "v2ResendEmailCodeResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v2Details"
        },
        "verificationCode": {
          "type": "string",
          "title": "in case the verification was set to return_code, the code will be returned"
        }
      }
    },
    "v2ResendInviteCodeResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v2Details"
        }
      }
    },
    "v2ResendPhoneCodeResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v2Details"
        },
        "verificationCode": {
          "type": "string",
          "title": "in case the verification was set to return_code, the code will be returned"
        }
      }
    },
    "v2RetrieveIdentityProviderIntentResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v2Details"
        },
        "idpInformation": {
          "$ref": "#/definitions/v2IDPInformation"
        },
        "userId": {
          "type": "string",
          "example": "163840776835432345",
          "description": "ID of the user in ZITADEL if external user is linked"
        }
      }
    },
    "v2ReturnEmailVerificationCode": {
      "type": "object"
    },
    "v2ReturnInviteCode": {
      "type": "object"
    },
    "v2ReturnPasskeyRegistrationCode": {
      "type": "object"
    },
    "v2ReturnPasswordResetCode": {
      "type": "object"
    },
    "v2ReturnPhoneVerificationCode": {
      "type": "object"
    },
    "v2SearchQuery": {
      "type": "object",
      "properties": {
        "userNameQuery": {
          "$ref": "#/definitions/v2UserNameQuery"
        },
        "firstNameQuery": {
          "$ref": "#/definitions/v2FirstNameQuery"
        },
        "lastNameQuery": {
          "$ref": "#/definitions/v2LastNameQuery"
        },
        "nickNameQuery": {
          "$ref": "#/definitions/v2NickNameQuery"
        },
        "displayNameQuery": {
          "$ref": "#/definitions/v2DisplayNameQuery"
        },
        "emailQuery": {
          "$ref": "#/definitions/v2EmailQuery"
        },
        "stateQuery": {
          "$ref": "#/definitions/v2StateQuery"
        },
        "typeQuery": {
          "$ref": "#/definitions/v2TypeQuery"
        },
        "loginNameQuery": {
          "$ref": "#/definitions/v2LoginNameQuery"
        },
        "inUserIdsQuery": {
          "$ref": "#/definitions/v2InUserIDQuery"
        },
        "orQuery": {
          "$ref": "#/definitions/v2OrQuery"
        },
        "andQuery": {
          "$ref": "#/definitions/v2AndQuery"
        },
        "notQuery": {
          "$ref": "#/definitions/v2NotQuery"
        },
        "inUserEmailsQuery": {
          "$ref": "#/definitions/v2InUserEmailsQuery"
        },
        "organizationIdQuery": {
          "$ref": "#/definitions/v2OrganizationIdQuery"
        }
      }
    },
    "v2SendEmailVerificationCode": {
      "type": "object",
      "properties": {
        "urlTemplate": {
          "type": "string",
          "example": "https://example.com/email/verify?userID={{.UserID}}\u0026code={{.Code}}\u0026orgID={{.OrgID}}",
          "description": "Optionally set a url_template, which will be used in the verification mail sent by ZITADEL to guide the user to your verification page.\nIf no template is set, the default ZITADEL url will be used.\n\nThe following placeholders can be used: UserID, OrgID, Code",
          "maxLength": 200,
          "minLength": 1
        }
      }
    },
    "v2SendInviteCode": {
      "type": "object",
      "properties": {
        "urlTemplate": {
          "type": "string",
          "example": "https://example.com/user/invite?userID={{.UserID}}\u0026code={{.Code}}\u0026orgID={{.OrgID}}",
          "description": "Optionally set a url_template, which will be used in the invite mail sent by ZITADEL to guide the user to your invitation page.\nIf no template is set, the default ZITADEL url will be used.\n\nThe following placeholders can be used: UserID, OrgID, Code",
          "maxLength": 200,
          "minLength": 1
        },
        "applicationName": {
          "type": "string",
          "example": "CustomerPortal",
          "description": "Optionally set an application name, which will be used in the invite mail sent by ZITADEL.\nIf no application name is set, ZITADEL will be used as default.",
          "maxLength": 200,
          "minLength": 1
        }
      }
    },
    "v2SendPasskeyRegistrationLink": {
      "type": "object",
      "properties": {
        "urlTemplate": {
          "type": "string",
          "example": "https://example.com/passkey/register?userID={{.UserID}}\u0026orgID={{.OrgID}}\u0026codeID={{.CodeID}}\u0026code={{.Code}}",
          "description": "Optionally set a url_template, which will be used in the mail sent by ZITADEL to guide the user to your passkey registration page.\nIf no template is set, the default ZITADEL url will be used.\n\nThe following placeholders can be used: UserID, OrgID, CodeID, Code",
          "maxLength": 200,
          "minLength": 1
        }
      }
    },
    "v2SendPasswordResetLink": {
      "type": "object",
      "properties": {
        "notificationType": {
          "$ref": "#/definitions/v2NotificationType"
        },
        "urlTemplate": {
          "type": "string",
          "example": "https://example.com/password/changey?userID={{.UserID}}\u0026code={{.Code}}\u0026orgID={{.OrgID}}",
          "description": "Optionally set a url_template, which will be used in the password reset mail sent by ZITADEL to guide the user to your password change page.\nIf no template is set, the default ZITADEL url will be used.\n\nThe following placeholders can be used: UserID, OrgID, Code",
          "maxLength": 200,
          "minLength": 1
        }
      }
    },
    "v2SendPhoneVerificationCode": {
      "type": "object"
    },
    "v2SetEmailResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v2Details"
        },
        "verificationCode": {
          "type": "string",
          "title": "in case the verification was set to return_code, the code will be returned"
        }
      }
    },
    "v2SetHumanEmail": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string",
          "example": "mini@mouse.com",
          "maxLength": 200,
          "minLength": 1
        },
        "sendCode": {
          "$ref": "#/definitions/v2SendEmailVerificationCode"
        },
        "returnCode": {
          "$ref": "#/definitions/v2ReturnEmailVerificationCode"
        },
        "isVerified": {
          "type": "boolean"
        }
      },
      "required": [
        "email"
      ]
    },
    "v2SetHumanPhone": {
      "type": "object",
      "properties": {
        "phone": {
          "type": "string",
          "example": "+41791234567",
          "maxLength": 200
        },
        "sendCode": {
          "$ref": "#/definitions/v2SendPhoneVerificationCode"
        },
        "returnCode": {
          "$ref": "#/definitions/v2ReturnPhoneVerificationCode"
        },
        "isVerified": {
          "type": "boolean"
        }
      }
    },
    "v2SetHumanProfile": {
      "type": "object",
      "properties": {
        "givenName": {
          "type": "string",
          "example": "Minnie",
          "maxLength": 200,
          "minLength": 1
        },
        "familyName": {
          "type": "string",
          "example": "Mouse",
          "maxLength": 200,
          "minLength": 1
        },
        "nickName": {
          "type": "string",
          "example": "Mini",
          "maxLength": 200
        },
        "displayName": {
          "type": "string",
          "example": "Minnie Mouse",
          "maxLength": 200
        },
        "preferredLanguage": {
          "type": "string",
          "example": "en",
          "maxLength": 10
        },
        "gender": {
          "$ref": "#/definitions/v2Gender",
          "example": "GENDER_FEMALE"
        }
      },
      "required": [
        "givenName",
        "familyName"
      ]
    },
    "v2SetMetadataEntry": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string",
          "example": "my-key",
          "maxLength": 200,
          "minLength": 1
        },
        "value": {
          "type": "string",
          "format": "byte",
          "example": "VGhpcyBpcyBteSB0ZXN0IHZhbHVl",
          "description": "The value has to be base64 encoded.",
          "maxLength": 500000,
          "minLength": 1
        }
      },
      "required": [
        "key",
        "value"
      ]
    },
    "v2SetPasswordResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v2Details"
        }
      }
    },
    "v2SetPhoneResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v2Details"
        },
        "verificationCode": {
          "type": "string",
          "title": "in case the verification was set to return_code, the code will be returned"
        }
      }
    },
    "v2StartIdentityProviderIntentRequest": {
      "type": "object",
      "properties": {
        "idpId": {
          "type": "string",
          "example": "163840776835432705",
          "description": "ID for existing identity provider",
          "maxLength": 200,
          "minLength": 1
        },
        "urls": {
          "$ref": "#/definitions/v2RedirectURLs"
        },
        "ldap": {
          "$ref": "#/definitions/v2LDAPCredentials"
        }
      }
    },
    "v2StartIdentityProviderIntentResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v2Details"
        },
        "authUrl": {
          "type": "string",
          "example": "https://accounts.google.com/o/oauth2/v2/auth?client_id=clientID\u0026callback=https%3A%2F%2Fzitadel.cloud%2Fidps%2Fcallback",
          "description": "URL to which the client should redirect"
        },
        "idpIntent": {
          "$ref": "#/definitions/v2IDPIntent",
          "description": "IDP Intent information"
        },
        "postForm": {
          "type": "string",
          "format": "byte",
          "description": "POST call information"
        }
      }
    },
    "v2StateQuery": {
      "type": "object",
      "properties": {
        "state": {
          "$ref": "#/definitions/v2UserState",
          "description": "current state of the user"
        }
      },
      "description": "Query for users with a specific state.",
      "required": [
        "state"
      ]
    },
    "v2TextQueryMethod": {
      "type": "string",
      "enum": [
        "TEXT_QUERY_METHOD_EQUALS",
        "TEXT_QUERY_METHOD_EQUALS_IGNORE_CASE",
        "TEXT_QUERY_METHOD_STARTS_WITH",
        "TEXT_QUERY_METHOD_STARTS_WITH_IGNORE_CASE",
        "TEXT_QUERY_METHOD_CONTAINS",
        "TEXT_QUERY_METHOD_CONTAINS_IGNORE_CASE",
        "TEXT_QUERY_METHOD_ENDS_WITH",
        "TEXT_QUERY_METHOD_ENDS_WITH_IGNORE_CASE"
      ],
      "default": "TEXT_QUERY_METHOD_EQUALS"
    },
    "v2TypeQuery": {
      "type": "object",
      "properties": {
        "type": {
          "$ref": "#/definitions/userv2Type",
          "description": "the type of the user"
        }
      },
      "description": "Query for users with a specific type.",
      "required": [
        "type"
      ]
    },
    "v2UnlockUserResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v2Details"
        }
      }
    },
    "v2UpdateHumanUserResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v2Details"
        },
        "emailCode": {
          "type": "string"
        },
        "phoneCode": {
          "type": "string"
        }
      }
    },
    "v2User": {
      "type": "object",
      "properties": {
        "userId": {
          "type": "string",
          "example": "d654e6ba-70a3-48ef-a95d-37c8d8a7901a"
        },
        "details": {
          "$ref": "#/definitions/v2Details"
        },
        "state": {
          "$ref": "#/definitions/v2UserState",
          "description": "current state of the user"
        },
        "username": {
          "type": "string",
          "example": "minnie-mouse"
        },
        "loginNames": {
          "type": "array",
          "example": [
            "gigi@zitadel.com",
            "gigi@zitadel.zitadel.ch"
          ],
          "items": {
            "type": "string"
          }
        },
        "preferredLoginName": {
          "type": "string",
          "example": "gigi@zitadel.com"
        },
        "human": {
          "$ref": "#/definitions/v2HumanUser",
          "description": "one of type use human or machine"
        },
        "machine": {
          "$ref": "#/definitions/v2MachineUser",
          "description": "one of type use human or machine"
        }
      }
    },
    "v2UserFieldName": {
      "type": "string",
      "enum": [
        "USER_FIELD_NAME_UNSPECIFIED",
        "USER_FIELD_NAME_USER_NAME",
        "USER_FIELD_NAME_FIRST_NAME",
        "USER_FIELD_NAME_LAST_NAME",
        "USER_FIELD_NAME_NICK_NAME",
        "USER_FIELD_NAME_DISPLAY_NAME",
        "USER_FIELD_NAME_EMAIL",
        "USER_FIELD_NAME_STATE",
        "USER_FIELD_NAME_TYPE",
        "USER_FIELD_NAME_CREATION_DATE"
      ],
      "default": "USER_FIELD_NAME_UNSPECIFIED"
    },
    "v2UserNameQuery": {
      "type": "object",
      "properties": {
        "userName": {
          "type": "string",
          "example": "gigi-giraffe",
          "maxLength": 200,
          "minLength": 1
        },
        "method": {
          "$ref": "#/definitions/v2TextQueryMethod",
          "description": "defines which text equality method is used"
        }
      },
      "description": "Query for users with a specific user name.",
      "required": [
        "userName"
      ]
    },
    "v2UserServiceSetPasswordBody": {
      "type": "object",
      "properties": {
        "newPassword": {
          "$ref": "#/definitions/v2Password"
        },
        "currentPassword": {
          "type": "string",
          "example": "Secr3tP4ssw0rd!",
          "maxLength": 200,
          "minLength": 1
        },
        "verificationCode": {
          "type": "string",
          "example": "SKJd342k",
          "description": "\"the verification code generated during password reset request\"",
          "maxLength": 20,
          "minLength": 1
        }
      },
      "required": [
        "currentPassword",
        "verificationCode"
      ]
    },
    "v2UserState": {
      "type": "string",
      "enum": [
        "USER_STATE_UNSPECIFIED",
        "USER_STATE_ACTIVE",
        "USER_STATE_INACTIVE",
        "USER_STATE_DELETED",
        "USER_STATE_LOCKED",
        "USER_STATE_INITIAL"
      ],
      "default": "USER_STATE_UNSPECIFIED"
    },
    "v2VerifyEmailResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v2Details"
        }
      }
    },
    "v2VerifyInviteCodeResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v2Details"
        }
      }
    },
    "v2VerifyPasskeyRegistrationResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v2Details"
        }
      }
    },
    "v2VerifyPhoneResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v2Details"
        }
      }
    },
    "v2VerifyTOTPRegistrationResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v2Details"
        }
      }
    },
    "v2VerifyU2FRegistrationResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v2Details"
        }
      }
    }
  },
  "securityDefinitions": {
    "OAuth2": {
      "type": "oauth2",
      "flow": "accessCode",
      "authorizationUrl": "$CUSTOM-DOMAIN/oauth/v2/authorize",
      "tokenUrl": "$CUSTOM-DOMAIN/oauth/v2/token",
      "scopes": {
        "openid": "openid",
        "urn:zitadel:iam:org:project:id:zitadel:aud": "urn:zitadel:iam:org:project:id:zitadel:aud"
      }
    }
  },
  "security": [
    {
      "OAuth2": [
        "openid",
        "urn:zitadel:iam:org:project:id:zitadel:aud"
      ]
    }
  ],
  "externalDocs": {
    "description": "Detailed information about ZITADEL",
    "url": "https://zitadel.com/docs"
  }
}
